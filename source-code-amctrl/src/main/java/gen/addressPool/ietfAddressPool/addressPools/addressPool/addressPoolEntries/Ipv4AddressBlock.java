/* 
 * @(#)Ipv4AddressBlock.java        1.0 18/02/16
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-address-pool", revision: "2015-07-17".
 */

package gen.addressPool.ietfAddressPool.addressPools.addressPool.addressPoolEntries;

import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import gen.addressPool.ietfAddressPool.AddrPool;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-address-pool
 * generated to "src/gen/addressPool/ietfAddressPool/addressPools/addressPool/addressPoolEntries/ipv4-address-block"
 * <p>
 * See line 148 in
 * ../yang/ietf-address-pool.yang
 *
 * @version 1.0 2016-02-18
 * @author Auto Generated
 */
public class Ipv4AddressBlock extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Ipv4AddressBlock object.
     */
    public Ipv4AddressBlock() {
        super(AddrPool.NAMESPACE, "ipv4-address-block");
    }

    /**
     * Constructor for an initialized Ipv4AddressBlock object,
     * 
     * @param ipv4AddressBlockNameValue Key argument of child.
     */
    public Ipv4AddressBlock(YangString ipv4AddressBlockNameValue)
            throws JNCException {
        super(AddrPool.NAMESPACE, "ipv4-address-block");
        Leaf ipv4AddressBlockName = new Leaf(AddrPool.NAMESPACE, "ipv4-address-block-name");
        ipv4AddressBlockName.setValue(ipv4AddressBlockNameValue);
        insertChild(ipv4AddressBlockName, childrenNames());
    }

    /**
     * Constructor for an initialized Ipv4AddressBlock object,
     * with String keys.
     * @param ipv4AddressBlockNameValue Key argument of child.
     */
    public Ipv4AddressBlock(String ipv4AddressBlockNameValue)
            throws JNCException {
        super(AddrPool.NAMESPACE, "ipv4-address-block");
        Leaf ipv4AddressBlockName = new Leaf(AddrPool.NAMESPACE, "ipv4-address-block-name");
        ipv4AddressBlockName.setValue(new YangString(ipv4AddressBlockNameValue));
        insertChild(ipv4AddressBlockName, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Ipv4AddressBlock clone() {
        Ipv4AddressBlock copy;
        try {
            copy = new Ipv4AddressBlock(getIpv4AddressBlockNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Ipv4AddressBlock)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Ipv4AddressBlock cloneShallow() {
        Ipv4AddressBlock copy;
        try {
            copy = new Ipv4AddressBlock(getIpv4AddressBlockNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Ipv4AddressBlock)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "ipv4-address-block-name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "ipv4-address-block-name",
            "ipv4-address-block-id",
            "ipv4-prefix",
            "ipv4-prefix-length",
            "time",
        };
    }

    /* Access methods for leaf child: "ipv4-address-block-name". */

    /**
     * Gets the value for child leaf "ipv4-address-block-name".
     * @return The value of the leaf.
     */
    public YangString getIpv4AddressBlockNameValue() throws JNCException {
        return (YangString)getValue("ipv4-address-block-name");
    }

    /**
     * Sets the value for child leaf "ipv4-address-block-name",
     * using instance of generated typedef class.
     * @param ipv4AddressBlockNameValue The value to set.
     * @param ipv4AddressBlockNameValue used during instantiation.
     */
    public void setIpv4AddressBlockNameValue(YangString ipv4AddressBlockNameValue)
            throws JNCException {
        setLeafValue(AddrPool.NAMESPACE,
            "ipv4-address-block-name",
            ipv4AddressBlockNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ipv4-address-block-name",
     * using a String value.
     * @param ipv4AddressBlockNameValue used during instantiation.
     */
    public void setIpv4AddressBlockNameValue(String ipv4AddressBlockNameValue)
            throws JNCException {
        setIpv4AddressBlockNameValue(new YangString(ipv4AddressBlockNameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ipv4-address-block-name" leaf will not have a value.
     */
    public void addIpv4AddressBlockName() throws JNCException {
        setLeafValue(AddrPool.NAMESPACE,
            "ipv4-address-block-name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "ipv4-address-block-id". */

    /**
     * Gets the value for child leaf "ipv4-address-block-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getIpv4AddressBlockIdValue() throws JNCException {
        return (YangUInt32)getValue("ipv4-address-block-id");
    }

    /**
     * Sets the value for child leaf "ipv4-address-block-id",
     * using instance of generated typedef class.
     * @param ipv4AddressBlockIdValue The value to set.
     * @param ipv4AddressBlockIdValue used during instantiation.
     */
    public void setIpv4AddressBlockIdValue(YangUInt32 ipv4AddressBlockIdValue)
            throws JNCException {
        setLeafValue(AddrPool.NAMESPACE,
            "ipv4-address-block-id",
            ipv4AddressBlockIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ipv4-address-block-id",
     * using Java primitive values.
     * @param ipv4AddressBlockIdValue used during instantiation.
     */
    public void setIpv4AddressBlockIdValue(long ipv4AddressBlockIdValue)
            throws JNCException {
        setIpv4AddressBlockIdValue(new YangUInt32(ipv4AddressBlockIdValue));
    }

    /**
     * Sets the value for child leaf "ipv4-address-block-id",
     * using a String value.
     * @param ipv4AddressBlockIdValue used during instantiation.
     */
    public void setIpv4AddressBlockIdValue(String ipv4AddressBlockIdValue)
            throws JNCException {
        setIpv4AddressBlockIdValue(new YangUInt32(ipv4AddressBlockIdValue));
    }

    /**
     * Unsets the value for child leaf "ipv4-address-block-id".
     */
    public void unsetIpv4AddressBlockIdValue() throws JNCException {
        delete("ipv4-address-block-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ipv4-address-block-id" leaf will not have a value.
     */
    public void addIpv4AddressBlockId() throws JNCException {
        setLeafValue(AddrPool.NAMESPACE,
            "ipv4-address-block-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ipv4-address-block-id" with operation "replace".
     */
    public void markIpv4AddressBlockIdReplace() throws JNCException {
        markLeafReplace("ipv4AddressBlockId");
    }

    /**
     * Marks the leaf "ipv4-address-block-id" with operation "merge".
     */
    public void markIpv4AddressBlockIdMerge() throws JNCException {
        markLeafMerge("ipv4AddressBlockId");
    }

    /**
     * Marks the leaf "ipv4-address-block-id" with operation "create".
     */
    public void markIpv4AddressBlockIdCreate() throws JNCException {
        markLeafCreate("ipv4AddressBlockId");
    }

    /**
     * Marks the leaf "ipv4-address-block-id" with operation "delete".
     */
    public void markIpv4AddressBlockIdDelete() throws JNCException {
        markLeafDelete("ipv4AddressBlockId");
    }

    /* Access methods for optional leaf child: "ipv4-prefix". */

    /**
     * Gets the value for child leaf "ipv4-prefix".
     * @return The value of the leaf.
     */
    public YangString getIpv4PrefixValue() throws JNCException {
        return (YangString)getValue("ipv4-prefix");
    }

    /**
     * Sets the value for child leaf "ipv4-prefix",
     * using instance of generated typedef class.
     * @param ipv4PrefixValue The value to set.
     * @param ipv4PrefixValue used during instantiation.
     */
    public void setIpv4PrefixValue(YangString ipv4PrefixValue)
            throws JNCException {
        setLeafValue(AddrPool.NAMESPACE,
            "ipv4-prefix",
            ipv4PrefixValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ipv4-prefix",
     * using a String value.
     * @param ipv4PrefixValue used during instantiation.
     */
    public void setIpv4PrefixValue(String ipv4PrefixValue) throws JNCException {
        setIpv4PrefixValue(new YangString(ipv4PrefixValue));
    }

    /**
     * Unsets the value for child leaf "ipv4-prefix".
     */
    public void unsetIpv4PrefixValue() throws JNCException {
        delete("ipv4-prefix");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ipv4-prefix" leaf will not have a value.
     */
    public void addIpv4Prefix() throws JNCException {
        setLeafValue(AddrPool.NAMESPACE,
            "ipv4-prefix",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ipv4-prefix" with operation "replace".
     */
    public void markIpv4PrefixReplace() throws JNCException {
        markLeafReplace("ipv4Prefix");
    }

    /**
     * Marks the leaf "ipv4-prefix" with operation "merge".
     */
    public void markIpv4PrefixMerge() throws JNCException {
        markLeafMerge("ipv4Prefix");
    }

    /**
     * Marks the leaf "ipv4-prefix" with operation "create".
     */
    public void markIpv4PrefixCreate() throws JNCException {
        markLeafCreate("ipv4Prefix");
    }

    /**
     * Marks the leaf "ipv4-prefix" with operation "delete".
     */
    public void markIpv4PrefixDelete() throws JNCException {
        markLeafDelete("ipv4Prefix");
    }

    /* Access methods for optional leaf child: "ipv4-prefix-length". */

    /**
     * Gets the value for child leaf "ipv4-prefix-length".
     * @return The value of the leaf.
     */
    public YangUInt32 getIpv4PrefixLengthValue() throws JNCException {
        return (YangUInt32)getValue("ipv4-prefix-length");
    }

    /**
     * Sets the value for child leaf "ipv4-prefix-length",
     * using instance of generated typedef class.
     * @param ipv4PrefixLengthValue The value to set.
     * @param ipv4PrefixLengthValue used during instantiation.
     */
    public void setIpv4PrefixLengthValue(YangUInt32 ipv4PrefixLengthValue)
            throws JNCException {
        setLeafValue(AddrPool.NAMESPACE,
            "ipv4-prefix-length",
            ipv4PrefixLengthValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ipv4-prefix-length",
     * using Java primitive values.
     * @param ipv4PrefixLengthValue used during instantiation.
     */
    public void setIpv4PrefixLengthValue(long ipv4PrefixLengthValue)
            throws JNCException {
        setIpv4PrefixLengthValue(new YangUInt32(ipv4PrefixLengthValue));
    }

    /**
     * Sets the value for child leaf "ipv4-prefix-length",
     * using a String value.
     * @param ipv4PrefixLengthValue used during instantiation.
     */
    public void setIpv4PrefixLengthValue(String ipv4PrefixLengthValue)
            throws JNCException {
        setIpv4PrefixLengthValue(new YangUInt32(ipv4PrefixLengthValue));
    }

    /**
     * Unsets the value for child leaf "ipv4-prefix-length".
     */
    public void unsetIpv4PrefixLengthValue() throws JNCException {
        delete("ipv4-prefix-length");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ipv4-prefix-length" leaf will not have a value.
     */
    public void addIpv4PrefixLength() throws JNCException {
        setLeafValue(AddrPool.NAMESPACE,
            "ipv4-prefix-length",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ipv4-prefix-length" with operation "replace".
     */
    public void markIpv4PrefixLengthReplace() throws JNCException {
        markLeafReplace("ipv4PrefixLength");
    }

    /**
     * Marks the leaf "ipv4-prefix-length" with operation "merge".
     */
    public void markIpv4PrefixLengthMerge() throws JNCException {
        markLeafMerge("ipv4PrefixLength");
    }

    /**
     * Marks the leaf "ipv4-prefix-length" with operation "create".
     */
    public void markIpv4PrefixLengthCreate() throws JNCException {
        markLeafCreate("ipv4PrefixLength");
    }

    /**
     * Marks the leaf "ipv4-prefix-length" with operation "delete".
     */
    public void markIpv4PrefixLengthDelete() throws JNCException {
        markLeafDelete("ipv4PrefixLength");
    }

    /* Access methods for optional leaf child: "time". */

    /**
     * Gets the value for child leaf "time".
     * @return The value of the leaf.
     */
    public YangUInt32 getTimeValue() throws JNCException {
        YangUInt32 time = (YangUInt32)getValue("time");
        if (time == null) {
            time = new YangUInt32("0");  // default
        }
        return time;
    }

    /**
     * Sets the value for child leaf "time",
     * using instance of generated typedef class.
     * @param timeValue The value to set.
     * @param timeValue used during instantiation.
     */
    public void setTimeValue(YangUInt32 timeValue) throws JNCException {
        setLeafValue(AddrPool.NAMESPACE,
            "time",
            timeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "time",
     * using Java primitive values.
     * @param timeValue used during instantiation.
     */
    public void setTimeValue(long timeValue) throws JNCException {
        setTimeValue(new YangUInt32(timeValue));
    }

    /**
     * Sets the value for child leaf "time",
     * using a String value.
     * @param timeValue used during instantiation.
     */
    public void setTimeValue(String timeValue) throws JNCException {
        setTimeValue(new YangUInt32(timeValue));
    }

    /**
     * Unsets the value for child leaf "time".
     */
    public void unsetTimeValue() throws JNCException {
        delete("time");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "time" leaf will not have a value.
     */
    public void addTime() throws JNCException {
        setLeafValue(AddrPool.NAMESPACE,
            "time",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "time" with operation "replace".
     */
    public void markTimeReplace() throws JNCException {
        markLeafReplace("time");
    }

    /**
     * Marks the leaf "time" with operation "merge".
     */
    public void markTimeMerge() throws JNCException {
        markLeafMerge("time");
    }

    /**
     * Marks the leaf "time" with operation "create".
     */
    public void markTimeCreate() throws JNCException {
        markLeafCreate("time");
    }

    /**
     * Marks the leaf "time" with operation "delete".
     */
    public void markTimeDelete() throws JNCException {
        markLeafDelete("time");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
