/* 
 * @(#)AmaReportLackOfAddressBlock.java        1.0 25/08/16
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "flexbng-device-info", revision: "2015-11-11".
 */

package gen.deviceInfo.flexbngDeviceInfo;

import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import gen.deviceInfo.flexbngDeviceInfo.FlexbngVbras;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-address-pool:flexbng:vbras
 * generated to "src/gen/deviceInfo/flexbngDeviceInfo/ama-report-lack-of-address-block"
 * <p>
 * See line 195 in
 * ver-2016-8-11/flexbng-device-info.yang
 *
 * @version 1.0 2016-08-25
 * @author Auto Generated
 */
public class AmaReportLackOfAddressBlock extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty AmaReportLackOfAddressBlock object.
     */
    public AmaReportLackOfAddressBlock() {
        super(FlexbngVbras.NAMESPACE, "ama-report-lack-of-address-block");
        setDefaultPrefix();
        setPrefix(FlexbngVbras.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public AmaReportLackOfAddressBlock clone() {
        return (AmaReportLackOfAddressBlock)cloneContent(new AmaReportLackOfAddressBlock());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public AmaReportLackOfAddressBlock cloneShallow() {
        return (AmaReportLackOfAddressBlock)cloneShallowContent(new AmaReportLackOfAddressBlock());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "device-id",
            "domain-name",
            "protocol-type",
        };
    }

    /* Access methods for optional leaf child: "device-id". */

    /**
     * Gets the value for child leaf "device-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getDeviceIdValue() throws JNCException {
        return (YangUInt32)getValue("device-id");
    }

    /**
     * Sets the value for child leaf "device-id",
     * using instance of generated typedef class.
     * @param deviceIdValue The value to set.
     * @param deviceIdValue used during instantiation.
     */
    public void setDeviceIdValue(YangUInt32 deviceIdValue) throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "device-id",
            deviceIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "device-id",
     * using Java primitive values.
     * @param deviceIdValue used during instantiation.
     */
    public void setDeviceIdValue(long deviceIdValue) throws JNCException {
        setDeviceIdValue(new YangUInt32(deviceIdValue));
    }

    /**
     * Sets the value for child leaf "device-id",
     * using a String value.
     * @param deviceIdValue used during instantiation.
     */
    public void setDeviceIdValue(String deviceIdValue) throws JNCException {
        setDeviceIdValue(new YangUInt32(deviceIdValue));
    }

    /**
     * Unsets the value for child leaf "device-id".
     */
    public void unsetDeviceIdValue() throws JNCException {
        delete("device-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "device-id" leaf will not have a value.
     */
    public void addDeviceId() throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "device-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "device-id" with operation "replace".
     */
    public void markDeviceIdReplace() throws JNCException {
        markLeafReplace("deviceId");
    }

    /**
     * Marks the leaf "device-id" with operation "merge".
     */
    public void markDeviceIdMerge() throws JNCException {
        markLeafMerge("deviceId");
    }

    /**
     * Marks the leaf "device-id" with operation "create".
     */
    public void markDeviceIdCreate() throws JNCException {
        markLeafCreate("deviceId");
    }

    /**
     * Marks the leaf "device-id" with operation "delete".
     */
    public void markDeviceIdDelete() throws JNCException {
        markLeafDelete("deviceId");
    }

    /* Access methods for optional leaf child: "domain-name". */

    /**
     * Gets the value for child leaf "domain-name".
     * @return The value of the leaf.
     */
    public YangString getDomainNameValue() throws JNCException {
        return (YangString)getValue("domain-name");
    }

    /**
     * Sets the value for child leaf "domain-name",
     * using instance of generated typedef class.
     * @param domainNameValue The value to set.
     * @param domainNameValue used during instantiation.
     */
    public void setDomainNameValue(YangString domainNameValue)
            throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "domain-name",
            domainNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "domain-name",
     * using a String value.
     * @param domainNameValue used during instantiation.
     */
    public void setDomainNameValue(String domainNameValue) throws JNCException {
        setDomainNameValue(new YangString(domainNameValue));
    }

    /**
     * Unsets the value for child leaf "domain-name".
     */
    public void unsetDomainNameValue() throws JNCException {
        delete("domain-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "domain-name" leaf will not have a value.
     */
    public void addDomainName() throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "domain-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "domain-name" with operation "replace".
     */
    public void markDomainNameReplace() throws JNCException {
        markLeafReplace("domainName");
    }

    /**
     * Marks the leaf "domain-name" with operation "merge".
     */
    public void markDomainNameMerge() throws JNCException {
        markLeafMerge("domainName");
    }

    /**
     * Marks the leaf "domain-name" with operation "create".
     */
    public void markDomainNameCreate() throws JNCException {
        markLeafCreate("domainName");
    }

    /**
     * Marks the leaf "domain-name" with operation "delete".
     */
    public void markDomainNameDelete() throws JNCException {
        markLeafDelete("domainName");
    }

    /* Access methods for optional leaf child: "protocol-type". */

    /**
     * Gets the value for child leaf "protocol-type".
     * @return The value of the leaf.
     */
    public YangUInt32 getProtocolTypeValue() throws JNCException {
        YangUInt32 protocolType = (YangUInt32)getValue("protocol-type");
        if (protocolType == null) {
            protocolType = new YangUInt32("1");  // default
        }
        return protocolType;
    }

    /**
     * Sets the value for child leaf "protocol-type",
     * using instance of generated typedef class.
     * @param protocolTypeValue The value to set.
     * @param protocolTypeValue used during instantiation.
     */
    public void setProtocolTypeValue(YangUInt32 protocolTypeValue)
            throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "protocol-type",
            protocolTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "protocol-type",
     * using Java primitive values.
     * @param protocolTypeValue used during instantiation.
     */
    public void setProtocolTypeValue(long protocolTypeValue)
            throws JNCException {
        setProtocolTypeValue(new YangUInt32(protocolTypeValue));
    }

    /**
     * Sets the value for child leaf "protocol-type",
     * using a String value.
     * @param protocolTypeValue used during instantiation.
     */
    public void setProtocolTypeValue(String protocolTypeValue)
            throws JNCException {
        setProtocolTypeValue(new YangUInt32(protocolTypeValue));
    }

    /**
     * Unsets the value for child leaf "protocol-type".
     */
    public void unsetProtocolTypeValue() throws JNCException {
        delete("protocol-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "protocol-type" leaf will not have a value.
     */
    public void addProtocolType() throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "protocol-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "protocol-type" with operation "replace".
     */
    public void markProtocolTypeReplace() throws JNCException {
        markLeafReplace("protocolType");
    }

    /**
     * Marks the leaf "protocol-type" with operation "merge".
     */
    public void markProtocolTypeMerge() throws JNCException {
        markLeafMerge("protocolType");
    }

    /**
     * Marks the leaf "protocol-type" with operation "create".
     */
    public void markProtocolTypeCreate() throws JNCException {
        markLeafCreate("protocolType");
    }

    /**
     * Marks the leaf "protocol-type" with operation "delete".
     */
    public void markProtocolTypeDelete() throws JNCException {
        markLeafDelete("protocolType");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
