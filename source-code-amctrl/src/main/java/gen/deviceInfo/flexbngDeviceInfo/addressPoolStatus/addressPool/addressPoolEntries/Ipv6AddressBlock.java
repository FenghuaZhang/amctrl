/* 
 * @(#)Ipv6AddressBlock.java        1.0 18/02/16
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "flexbng-device-info", revision: "2015-11-11".
 */

package gen.deviceInfo.flexbngDeviceInfo.addressPoolStatus.addressPool.addressPoolEntries;

import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import gen.deviceInfo.flexbngDeviceInfo.FlexbngVbras;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-address-pool:flexbng:vbras
 * generated to "src/gen/deviceInfo/flexbngDeviceInfo/addressPoolStatus/addressPool/addressPoolEntries/ipv6-address-block"
 * <p>
 * See line 125 in
 * ../yang/flexbng-device-info.yang
 *
 * @version 1.0 2016-02-18
 * @author Auto Generated
 */
public class Ipv6AddressBlock extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Ipv6AddressBlock object.
     */
    public Ipv6AddressBlock() {
        super(FlexbngVbras.NAMESPACE, "ipv6-address-block");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Ipv6AddressBlock clone() {
        return (Ipv6AddressBlock)cloneContent(new Ipv6AddressBlock());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Ipv6AddressBlock cloneShallow() {
        return (Ipv6AddressBlock)cloneShallowContent(new Ipv6AddressBlock());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "ipv6-address-block-name",
            "ipv6-address-block-id",
            "average-address-usage-ratio",
        };
    }

    /* Access methods for leaf child: "ipv6-address-block-name". */

    /**
     * Gets the value for child leaf "ipv6-address-block-name".
     * @return The value of the leaf.
     */
    public YangString getIpv6AddressBlockNameValue() throws JNCException {
        return (YangString)getValue("ipv6-address-block-name");
    }

    /**
     * Sets the value for child leaf "ipv6-address-block-name",
     * using instance of generated typedef class.
     * @param ipv6AddressBlockNameValue The value to set.
     * @param ipv6AddressBlockNameValue used during instantiation.
     */
    public void setIpv6AddressBlockNameValue(YangString ipv6AddressBlockNameValue)
            throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "ipv6-address-block-name",
            ipv6AddressBlockNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ipv6-address-block-name",
     * using a String value.
     * @param ipv6AddressBlockNameValue used during instantiation.
     */
    public void setIpv6AddressBlockNameValue(String ipv6AddressBlockNameValue)
            throws JNCException {
        setIpv6AddressBlockNameValue(new YangString(ipv6AddressBlockNameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ipv6-address-block-name" leaf will not have a value.
     */
    public void addIpv6AddressBlockName() throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "ipv6-address-block-name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "ipv6-address-block-id". */

    /**
     * Gets the value for child leaf "ipv6-address-block-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getIpv6AddressBlockIdValue() throws JNCException {
        return (YangUInt32)getValue("ipv6-address-block-id");
    }

    /**
     * Sets the value for child leaf "ipv6-address-block-id",
     * using instance of generated typedef class.
     * @param ipv6AddressBlockIdValue The value to set.
     * @param ipv6AddressBlockIdValue used during instantiation.
     */
    public void setIpv6AddressBlockIdValue(YangUInt32 ipv6AddressBlockIdValue)
            throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "ipv6-address-block-id",
            ipv6AddressBlockIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ipv6-address-block-id",
     * using Java primitive values.
     * @param ipv6AddressBlockIdValue used during instantiation.
     */
    public void setIpv6AddressBlockIdValue(long ipv6AddressBlockIdValue)
            throws JNCException {
        setIpv6AddressBlockIdValue(new YangUInt32(ipv6AddressBlockIdValue));
    }

    /**
     * Sets the value for child leaf "ipv6-address-block-id",
     * using a String value.
     * @param ipv6AddressBlockIdValue used during instantiation.
     */
    public void setIpv6AddressBlockIdValue(String ipv6AddressBlockIdValue)
            throws JNCException {
        setIpv6AddressBlockIdValue(new YangUInt32(ipv6AddressBlockIdValue));
    }

    /**
     * Unsets the value for child leaf "ipv6-address-block-id".
     */
    public void unsetIpv6AddressBlockIdValue() throws JNCException {
        delete("ipv6-address-block-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ipv6-address-block-id" leaf will not have a value.
     */
    public void addIpv6AddressBlockId() throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "ipv6-address-block-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ipv6-address-block-id" with operation "replace".
     */
    public void markIpv6AddressBlockIdReplace() throws JNCException {
        markLeafReplace("ipv6AddressBlockId");
    }

    /**
     * Marks the leaf "ipv6-address-block-id" with operation "merge".
     */
    public void markIpv6AddressBlockIdMerge() throws JNCException {
        markLeafMerge("ipv6AddressBlockId");
    }

    /**
     * Marks the leaf "ipv6-address-block-id" with operation "create".
     */
    public void markIpv6AddressBlockIdCreate() throws JNCException {
        markLeafCreate("ipv6AddressBlockId");
    }

    /**
     * Marks the leaf "ipv6-address-block-id" with operation "delete".
     */
    public void markIpv6AddressBlockIdDelete() throws JNCException {
        markLeafDelete("ipv6AddressBlockId");
    }

    /* Access methods for optional leaf child: "average-address-usage-ratio". */

    /**
     * Gets the value for child leaf "average-address-usage-ratio".
     * @return The value of the leaf.
     */
    public YangUInt32 getAverageAddressUsageRatioValue() throws JNCException {
        return (YangUInt32)getValue("average-address-usage-ratio");
    }

    /**
     * Sets the value for child leaf "average-address-usage-ratio",
     * using instance of generated typedef class.
     * @param averageAddressUsageRatioValue The value to set.
     * @param averageAddressUsageRatioValue used during instantiation.
     */
    public void setAverageAddressUsageRatioValue(YangUInt32 averageAddressUsageRatioValue)
            throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "average-address-usage-ratio",
            averageAddressUsageRatioValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "average-address-usage-ratio",
     * using Java primitive values.
     * @param averageAddressUsageRatioValue used during instantiation.
     */
    public void setAverageAddressUsageRatioValue(long averageAddressUsageRatioValue)
            throws JNCException {
        setAverageAddressUsageRatioValue(new YangUInt32(averageAddressUsageRatioValue));
    }

    /**
     * Sets the value for child leaf "average-address-usage-ratio",
     * using a String value.
     * @param averageAddressUsageRatioValue used during instantiation.
     */
    public void setAverageAddressUsageRatioValue(String averageAddressUsageRatioValue)
            throws JNCException {
        setAverageAddressUsageRatioValue(new YangUInt32(averageAddressUsageRatioValue));
    }

    /**
     * Unsets the value for child leaf "average-address-usage-ratio".
     */
    public void unsetAverageAddressUsageRatioValue() throws JNCException {
        delete("average-address-usage-ratio");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "average-address-usage-ratio" leaf will not have a value.
     */
    public void addAverageAddressUsageRatio() throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "average-address-usage-ratio",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "average-address-usage-ratio" with operation "replace".
     */
    public void markAverageAddressUsageRatioReplace() throws JNCException {
        markLeafReplace("averageAddressUsageRatio");
    }

    /**
     * Marks the leaf "average-address-usage-ratio" with operation "merge".
     */
    public void markAverageAddressUsageRatioMerge() throws JNCException {
        markLeafMerge("averageAddressUsageRatio");
    }

    /**
     * Marks the leaf "average-address-usage-ratio" with operation "create".
     */
    public void markAverageAddressUsageRatioCreate() throws JNCException {
        markLeafCreate("averageAddressUsageRatio");
    }

    /**
     * Marks the leaf "average-address-usage-ratio" with operation "delete".
     */
    public void markAverageAddressUsageRatioDelete() throws JNCException {
        markLeafDelete("averageAddressUsageRatio");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
