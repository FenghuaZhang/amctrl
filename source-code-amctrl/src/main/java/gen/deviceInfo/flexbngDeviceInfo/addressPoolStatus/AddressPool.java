/* 
 * @(#)AddressPool.java        1.0 18/02/16
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "flexbng-device-info", revision: "2015-11-11".
 */

package gen.deviceInfo.flexbngDeviceInfo.addressPoolStatus;

import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import gen.deviceInfo.flexbngDeviceInfo.FlexbngVbras;
import gen.deviceInfo.flexbngDeviceInfo.addressPoolStatus.addressPool.AddressPoolEntries;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-address-pool:flexbng:vbras
 * generated to "src/gen/deviceInfo/flexbngDeviceInfo/addressPoolStatus/address-pool"
 * <p>
 * See line 101 in
 * ../yang/flexbng-device-info.yang
 *
 * @version 1.0 2016-02-18
 * @author Auto Generated
 */
public class AddressPool extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "address-pool-entries".
     */
    public AddressPoolEntries addressPoolEntries = null;

    /**
     * Constructor for an empty AddressPool object.
     */
    public AddressPool() {
        super(FlexbngVbras.NAMESPACE, "address-pool");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public AddressPool clone() {
        return (AddressPool)cloneContent(new AddressPool());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public AddressPool cloneShallow() {
        return (AddressPool)cloneShallowContent(new AddressPool());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "address-pool-name",
            "address-pool-id",
            "domain-name",
            "address-pool-entries",
        };
    }

    /* Access methods for leaf child: "address-pool-name". */

    /**
     * Gets the value for child leaf "address-pool-name".
     * @return The value of the leaf.
     */
    public YangString getAddressPoolNameValue() throws JNCException {
        return (YangString)getValue("address-pool-name");
    }

    /**
     * Sets the value for child leaf "address-pool-name",
     * using instance of generated typedef class.
     * @param addressPoolNameValue The value to set.
     * @param addressPoolNameValue used during instantiation.
     */
    public void setAddressPoolNameValue(YangString addressPoolNameValue)
            throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "address-pool-name",
            addressPoolNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "address-pool-name",
     * using a String value.
     * @param addressPoolNameValue used during instantiation.
     */
    public void setAddressPoolNameValue(String addressPoolNameValue)
            throws JNCException {
        setAddressPoolNameValue(new YangString(addressPoolNameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "address-pool-name" leaf will not have a value.
     */
    public void addAddressPoolName() throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "address-pool-name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "address-pool-id". */

    /**
     * Gets the value for child leaf "address-pool-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getAddressPoolIdValue() throws JNCException {
        return (YangUInt32)getValue("address-pool-id");
    }

    /**
     * Sets the value for child leaf "address-pool-id",
     * using instance of generated typedef class.
     * @param addressPoolIdValue The value to set.
     * @param addressPoolIdValue used during instantiation.
     */
    public void setAddressPoolIdValue(YangUInt32 addressPoolIdValue)
            throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "address-pool-id",
            addressPoolIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "address-pool-id",
     * using Java primitive values.
     * @param addressPoolIdValue used during instantiation.
     */
    public void setAddressPoolIdValue(long addressPoolIdValue)
            throws JNCException {
        setAddressPoolIdValue(new YangUInt32(addressPoolIdValue));
    }

    /**
     * Sets the value for child leaf "address-pool-id",
     * using a String value.
     * @param addressPoolIdValue used during instantiation.
     */
    public void setAddressPoolIdValue(String addressPoolIdValue)
            throws JNCException {
        setAddressPoolIdValue(new YangUInt32(addressPoolIdValue));
    }

    /**
     * Unsets the value for child leaf "address-pool-id".
     */
    public void unsetAddressPoolIdValue() throws JNCException {
        delete("address-pool-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "address-pool-id" leaf will not have a value.
     */
    public void addAddressPoolId() throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "address-pool-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "address-pool-id" with operation "replace".
     */
    public void markAddressPoolIdReplace() throws JNCException {
        markLeafReplace("addressPoolId");
    }

    /**
     * Marks the leaf "address-pool-id" with operation "merge".
     */
    public void markAddressPoolIdMerge() throws JNCException {
        markLeafMerge("addressPoolId");
    }

    /**
     * Marks the leaf "address-pool-id" with operation "create".
     */
    public void markAddressPoolIdCreate() throws JNCException {
        markLeafCreate("addressPoolId");
    }

    /**
     * Marks the leaf "address-pool-id" with operation "delete".
     */
    public void markAddressPoolIdDelete() throws JNCException {
        markLeafDelete("addressPoolId");
    }

    /* Access methods for optional leaf child: "domain-name". */

    /**
     * Gets the value for child leaf "domain-name".
     * @return The value of the leaf.
     */
    public YangString getDomainNameValue() throws JNCException {
        return (YangString)getValue("domain-name");
    }

    /**
     * Sets the value for child leaf "domain-name",
     * using instance of generated typedef class.
     * @param domainNameValue The value to set.
     * @param domainNameValue used during instantiation.
     */
    public void setDomainNameValue(YangString domainNameValue)
            throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "domain-name",
            domainNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "domain-name",
     * using a String value.
     * @param domainNameValue used during instantiation.
     */
    public void setDomainNameValue(String domainNameValue) throws JNCException {
        setDomainNameValue(new YangString(domainNameValue));
    }

    /**
     * Unsets the value for child leaf "domain-name".
     */
    public void unsetDomainNameValue() throws JNCException {
        delete("domain-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "domain-name" leaf will not have a value.
     */
    public void addDomainName() throws JNCException {
        setLeafValue(FlexbngVbras.NAMESPACE,
            "domain-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "domain-name" with operation "replace".
     */
    public void markDomainNameReplace() throws JNCException {
        markLeafReplace("domainName");
    }

    /**
     * Marks the leaf "domain-name" with operation "merge".
     */
    public void markDomainNameMerge() throws JNCException {
        markLeafMerge("domainName");
    }

    /**
     * Marks the leaf "domain-name" with operation "create".
     */
    public void markDomainNameCreate() throws JNCException {
        markLeafCreate("domainName");
    }

    /**
     * Marks the leaf "domain-name" with operation "delete".
     */
    public void markDomainNameDelete() throws JNCException {
        markLeafDelete("domainName");
    }

    /* Access methods for container child: "address-pool-entries". */

    /**
     * Adds container entry "addressPoolEntries", using an existing object.
     * @param addressPoolEntries The object to add.
     * @return The added child.
     */
    public AddressPoolEntries addAddressPoolEntries(AddressPoolEntries addressPoolEntries)
            throws JNCException {
        this.addressPoolEntries = addressPoolEntries;
        insertChild(addressPoolEntries, childrenNames());
        return addressPoolEntries;
    }

    /**
     * Adds container entry "addressPoolEntries".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public AddressPoolEntries addAddressPoolEntries() throws JNCException {
        AddressPoolEntries addressPoolEntries = new AddressPoolEntries();
        this.addressPoolEntries = addressPoolEntries;
        insertChild(addressPoolEntries, childrenNames());
        return addressPoolEntries;
    }

    /**
     * Deletes container entry "addressPoolEntries".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteAddressPoolEntries() throws JNCException {
        this.addressPoolEntries = null;
        String path = "address-pool-entries";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof AddressPoolEntries) addressPoolEntries = (AddressPoolEntries)child;
    }

}
